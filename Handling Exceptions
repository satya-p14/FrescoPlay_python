#Task 1: Write the function "Handle_Exc1", that takes no parameters and will handle the "ValueError" exception.
#Task 2: Read two integers say a and b from STDIN.
#Task 3: Perform the following operations:-
    #   (a) IF:       Raise "ValueError" exception if a is greater than "150" or if b is less than "100" and print a message "Their sum is out of range."
    #   (b) Else IF : Raise "ValueError" exception if their sum is greater than "400" and print "Their sum is out of range".
    #   (c) If none of above Exceptions happens, then print "All in range"

def Handle_Exc1():
    # Write your code here
    a = int(input())
    b = int(input())
    if a > 150 or b < 100:
        raise ValueError("Input integers value out of range.")
    elif (a+b) > 400:
        raise ValueError("Their sum is out of range")
    else:
        print("All in range")

if __name__ == '__main__':
    try:
        Handle_Exc1()
    except ValueError as exp:
        print(exp)



#problem -2
#Handling Exceptions 2
#
# Task1 : Write the function definition for the function "FORLoop", which takes no parameters, as follows:
# (a) Get an Integer input "n" from the user.
# (b) Create a LIST of "n" integers from 
#

def FORLoop():
    # Write your code here
    n= int(input())
    l1= [ int(input())   for i in range(n)  ]
    print(l1)
    iter1=iter(l1)
    
    for i in range(n):
        print(next(iter1))       
    return iter1


#problem 3
#
# Define the Class for user-defined exceptions "MinimumDepositError" and "MinimumBalanceError" here
#

class MinimumDepositError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return str(self.value)

class MinimumBalanceError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return str(self.value)
    
    
def Bank_ATM(balance,choice,amount):
    # Write your code here
    bal=balance
    ch=choice
    
    if balance<500:
         raise ValueError("As per the Minimum Balance Policy, Balance must be at least 500")
    
    if ch==1:
        if amount<2000:
            raise MinimumDepositError("The Minimum amount of Deposit should be 2000.")
        else:
            bal+=amount
            print(f"Updated Balance Amount:  {bal}")
    elif ch==2:         
        bal= bal-amount
        if bal<500:
            raise MinimumBalanceError("You cannot withdraw this amount due to Minimum Balance Policy")
        else:
            print(f"Updated Balance Amount:  {bal}")
    else:
        pass 


#problem 4
#
#
# Tassk 1: This is a typical Interface privided in the library, which takes 3 inputs from the library members, sequentially. 
#         They are:
#           o memberfee,
#           o installment,
#           o book
#

 
def Library(memberfee,installment,book):
    
    avail_book=["philosophers stone", "chamber of secrets","prisoner of azkaban", "goblet of fire", "order of phoenix","half blood prince","deathly hallows 1","deathly hallows 2"]
    
    
    
    # Task 2: Raise "ValueError" exception if the input for the number of installments is greater than "3". And printa message "Maximum Permitted Number of Installements is 3"
    if installment > 3:
        raise ValueError("Maximum Permitted Number of Installments is 3")
    
        
    # Task 3: Raise 'ZeroDivisionError' exception if the input for the number of installments is equal to "0" and print a message "Number of installments cannot be Zero."
    #         else : Print the amount per installment as "Amount per installment is 3000.0".
    if installment ==0:
        raise ZeroDivisionError("Number of Installments cannot be Zero.")
    else:
        amt_per_install= memberfee/installment
        print(f"Amount per Installment is  {amt_per_install}")
      
    # Task 4: Raise "NameErro" exception if the user is looking for a book other than the books mentioned above and print a messsage "No such books exists in this section".
    #          else: print "It is available in this section".   
    if book not in avail_book:
        raise NameError("No such book exists in this section")
    else:
        print("It is available in this section")



























